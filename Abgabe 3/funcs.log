  specific_catalog |            specific_name            | routine_type                                                                   |routine_definition
-------------------+--------------------------------------+--------------------------------------------------------------------------------+-------------------------
 geo              | dohaltestelleanweg_78652            | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select h.id from haltestelle as h where h.id not in ( select h.id from Haltestelle as h, strasse s where ST_CoveredBy(h.pos,s.path) union select h.id from Haltestelle as h, strassenbahn sb where ST_CoveredBy(h.pos, sb.path) union select h.id from Haltestelle as h, eisenbahn e where ST_CoveredBy(h.pos, e.path) ))); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION HaltestelleAnWeg potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | dobrueckeistweg_78660               | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select a.id from bruecke as a where a.id not in ( select a.id from bruecke a, strasse b where ST_Coveredby(a.path,b.path) union select a.id from bruecke a, strassenbahn b where ST_Coveredby(a.path,b.path) union select a.id from bruecke a, eisenbahn b where ST_Coveredby(a.path,b.path) ))); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION BrueckeIstWeg potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | doparkplatzanstraße_78668           | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select a.id from Parkplatz as a where a.id not in ( select a.id from Parkplatz as a, Strasse as b where ST_Crosses(a.umriss,b.path)) )); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION ParkplatzAnStraße potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | doampelanweg_78644                  | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select a.id from ampel as a where a.id not in ( select a.id from ampel as a, strasse s where ST_CoveredBy(a.pos,s.path) union select a.id from ampel as a, strassenbahn sb where ST_CoveredBy(a.pos, sb.path) union select a.id from ampel as a, eisenbahn e where ST_CoveredBy(a.pos, e.path) ))); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION AmpelAnWeg potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | dokeinhausinsee_78617               | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select * from See s,Haus h where ST_Crosses(s.umriss,h.umriss) or ST_CONTAINS(s.umriss,h.umriss) )); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION keinHausInSee potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | dokeinestrassedurchspielplatz_78623 | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select * from Strasse t, Spielplatz p where ST_Crosses(t.path,p.umriss) )); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION keineStrasseDurchSpielplatz potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | dokeineparkplatzimsee_78629         | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select * from See s, Parkplatz p where ST_Crosses(s.umriss,p.umriss) or ST_CONTAINS(s.umriss,p.umriss) )); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION keineParkplatzImSee potenziell verletzt!';END IF;RETURN NEW;END;
 geo              | dobrueckemusskreuzen_78635          | FUNCTION     | Declare ErgebnisRec RECORD; BEGIN SELECT INTO ErgebnisRec COUNT(*) AS Anzahl FROM TestSysRel WHERE NOT ( not exists( select b.id from bruecke as b where b.id not in ( select b.id from bruecke as b, strasse s where ST_Crosses(b.path,s.path) union select b.id from bruecke as b, strassenbahn sb where ST_Crosses(b.path, sb.path) union select b.id from bruecke as b, eisenbahn e where ST_Crosses(b.path, e.path) union select b.id from bruecke as b, fluss f where ST_Crosses(b.path, f.path) ))); IF (ErgebnisRec.Anzahl >=1 )THEN RAISE EXCEPTION'ASSERTION brueckeMussKreuzen potenziell verletzt!';END IF;RETURN NEW;END;

